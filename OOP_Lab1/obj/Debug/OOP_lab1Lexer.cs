//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Приложения\GitHub\OOP_labs\OOP_Lab1\OOP_lab1.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OOP_lab1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class OOP_lab1Lexer : Lexer {
	public const int
		NUMBER=1, IDENTIFIER=2, INT=3, INC=4, DEC=5, MAX=6, MIN=7, MOD=8, DIV=9, 
		EXPONENT=10, MULTIPLY=11, DIVIDE=12, SUBSTRACT=13, ADD=14, LPAREN=15, 
		RPAREN=16, LESS=17, GREATER=18, LESSEQUAL=19, GREATEREQUAL=20, EQUAL=21, 
		INEQUAL=22, DESP=23, WS=24;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "INT", "INC", "DEC", "MAX", "MIN", "MOD", "DIV", 
		"EXPONENT", "MULTIPLY", "DIVIDE", "SUBSTRACT", "ADD", "LPAREN", "RPAREN", 
		"LESS", "GREATER", "LESSEQUAL", "GREATEREQUAL", "EQUAL", "INEQUAL", "DESP", 
		"WS"
	};


	public OOP_lab1Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'inc'", "'dec'", "'max'", "'min'", "'mod'", "'div'", 
		"'^'", "'*'", "'/'", "'-'", "'+'", "'('", "')'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INT", "INC", "DEC", "MAX", "MIN", "MOD", 
		"DIV", "EXPONENT", "MULTIPLY", "DIVIDE", "SUBSTRACT", "ADD", "LPAREN", 
		"RPAREN", "LESS", "GREATER", "LESSEQUAL", "GREATEREQUAL", "EQUAL", "INEQUAL", 
		"DESP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OOP_lab1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1A\x83\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x3\x2\x3\x2"+
		"\x3\x2\x5\x2\x37\n\x2\x3\x3\x6\x3:\n\x3\r\x3\xE\x3;\x3\x3\x3\x3\x6\x3"+
		"@\n\x3\r\x3\xE\x3\x41\x3\x4\x6\x4\x45\n\x4\r\x4\xE\x4\x46\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x2"+
		"\x2\x2\x1A\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2"+
		"\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19"+
		"\x31\x2\x1A\x3\x2\a\x4\x2\x43\\\x63|\x3\x2\x33;\x3\x2\x32;\x4\x2..==\x5"+
		"\x2\v\f\xF\xF\"\"\x86\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'"+
		"\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2"+
		"\x2\x2\x2\x31\x3\x2\x2\x2\x3\x33\x3\x2\x2\x2\x5\x39\x3\x2\x2\x2\a\x44"+
		"\x3\x2\x2\x2\tH\x3\x2\x2\x2\vL\x3\x2\x2\x2\rP\x3\x2\x2\x2\xFT\x3\x2\x2"+
		"\x2\x11X\x3\x2\x2\x2\x13\\\x3\x2\x2\x2\x15`\x3\x2\x2\x2\x17\x62\x3\x2"+
		"\x2\x2\x19\x64\x3\x2\x2\x2\x1B\x66\x3\x2\x2\x2\x1Dh\x3\x2\x2\x2\x1Fj\x3"+
		"\x2\x2\x2!l\x3\x2\x2\x2#n\x3\x2\x2\x2%p\x3\x2\x2\x2\'r\x3\x2\x2\x2)u\x3"+
		"\x2\x2\x2+x\x3\x2\x2\x2-z\x3\x2\x2\x2/}\x3\x2\x2\x2\x31\x7F\x3\x2\x2\x2"+
		"\x33\x36\x5\a\x4\x2\x34\x35\a\x30\x2\x2\x35\x37\x5\a\x4\x2\x36\x34\x3"+
		"\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x4\x3\x2\x2\x2\x38:\t\x2\x2\x2\x39\x38"+
		"\x3\x2\x2\x2:;\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x3\x2\x2\x2"+
		"=?\t\x3\x2\x2>@\t\x4\x2\x2?>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2"+
		"\x2\x41\x42\x3\x2\x2\x2\x42\x6\x3\x2\x2\x2\x43\x45\x4\x32;\x2\x44\x43"+
		"\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2"+
		"G\b\x3\x2\x2\x2HI\ak\x2\x2IJ\ap\x2\x2JK\a\x65\x2\x2K\n\x3\x2\x2\x2LM\a"+
		"\x66\x2\x2MN\ag\x2\x2NO\a\x65\x2\x2O\f\x3\x2\x2\x2PQ\ao\x2\x2QR\a\x63"+
		"\x2\x2RS\az\x2\x2S\xE\x3\x2\x2\x2TU\ao\x2\x2UV\ak\x2\x2VW\ap\x2\x2W\x10"+
		"\x3\x2\x2\x2XY\ao\x2\x2YZ\aq\x2\x2Z[\a\x66\x2\x2[\x12\x3\x2\x2\x2\\]\a"+
		"\x66\x2\x2]^\ak\x2\x2^_\ax\x2\x2_\x14\x3\x2\x2\x2`\x61\a`\x2\x2\x61\x16"+
		"\x3\x2\x2\x2\x62\x63\a,\x2\x2\x63\x18\x3\x2\x2\x2\x64\x65\a\x31\x2\x2"+
		"\x65\x1A\x3\x2\x2\x2\x66g\a/\x2\x2g\x1C\x3\x2\x2\x2hi\a-\x2\x2i\x1E\x3"+
		"\x2\x2\x2jk\a*\x2\x2k \x3\x2\x2\x2lm\a+\x2\x2m\"\x3\x2\x2\x2no\a>\x2\x2"+
		"o$\x3\x2\x2\x2pq\a@\x2\x2q&\x3\x2\x2\x2rs\a>\x2\x2st\a?\x2\x2t(\x3\x2"+
		"\x2\x2uv\a@\x2\x2vw\a?\x2\x2w*\x3\x2\x2\x2xy\a?\x2\x2y,\x3\x2\x2\x2z{"+
		"\a>\x2\x2{|\a@\x2\x2|.\x3\x2\x2\x2}~\t\x5\x2\x2~\x30\x3\x2\x2\x2\x7F\x80"+
		"\t\x6\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\b\x19\x2\x2\x82\x32\x3\x2\x2\x2"+
		"\a\x2\x36;\x41\x46\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace OOP_lab1
